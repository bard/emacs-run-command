(load (expand-file-name "setup.el") t t t)

(director-run
 :version 1
 :before-start
 (lambda ()
   (setq initial-scratch-message "")
   (require 'run-command)
   (require 'helm)
   (require 'helm-config)
   (helm-mode 1)
   (menu-bar-mode 'toggle)
   (add-to-list 'run-command-recipes 'run-command-recipe-example)
   (erase-buffer)
   (emacs-lisp-mode)
   (eldoc-mode -1)
   (set-face-attribute 'helm-source-header nil :background "transparent" :foreground "dim gray" :weight 'normal)
   (set-face-attribute 'helm-selection nil :background "transparent")
   (set-face-attribute 'helm-match nil :foreground "brightred " :weight 'bold :underline t))
 :steps
 '((:type "(defun run-command-recipe-example ()\r")
   (:type "(list\r")
   (:wait 1)
   (:type "'( :command-name \"say-hello\"\r")
   (:type ":command-line \"echo Hello, world!\"\r")
   (:type ":display \"Say hello\")\r")
   (:wait 1)
   (:type "'( :command-name \"serve-dir-http\"\r")
   (:type ":command-line \"python3 -m http.server 8000\"\r")
   (:type ":display \"Serve current directory over HTTP\")))\r")
   (:call eval-last-sexp)
   (:wait 1)
   (:type "\n")
   (:type "(add-to-list 'run-command-recipes 'run-command-recipe-example)")
   (:call eval-last-sexp)
   (:wait 1)
   (:type "\M-x")
   (:type "run-command")
   (:type [return])
   (:wait 1.5)
   (:assert (length= (window-list) 3))
   (:type "say")
   (:wait 2)
   (:type [return])
   (:wait 2)
   (:type "\M-x")
   (:type  "run-command")
   (:type [return])
   (:wait 1.5)
   (:assert (length= (window-list) 3))
   (:type "http")
   (:wait 2)
   (:type [return])
   (:wait 4))
 :delay-between-steps 0.1
 :typing-style 'human
 :log-target '(file . "director.log")
 :on-failure (lambda () (kill-emacs 1))
 :after-end (lambda () (kill-emacs)))
