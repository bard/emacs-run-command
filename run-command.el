;;; run-command.el --- Run an external command from a context-dependent list -*- lexical-binding: t -*-

;; Copyright (C) 2020-2023 Massimiliano Mirra

;; Author: Massimiliano Mirra <hyperstruct@gmail.com>
;; URL: https://github.com/bard/emacs-run-command
;; Version: 0.1.0
;; Package-Requires: ((emacs "27.1"))
;; Keywords: processes

;; This file is not part of GNU Emacs

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; For a full copy of the GNU General Public License
;; see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Leave Emacs less.  Relocate those frequent shell commands to configurable,
;; dynamic, context-sensitive lists, and run them at a fraction of the
;; keystrokes with autocompletion.

;;; Code:

;;;; Dependencies

(require 'run-command-core)
(require 'run-command-selector-helm)
(require 'run-command-selector-ivy)
(require 'run-command-selector-completing-read)
(require 'run-command-runner-term)
(require 'run-command-runner-compile)
(require 'run-command-runner-vterm)
(require 'run-command-runner-eat)

;;;; Customization

(defgroup run-command nil
  "Run an external command from a context-dependent list."
  :group 'convenience
  :group 'processes
  :prefix "run-command-"
  :link '(url-link "https://github.com/bard/emacs-run-command"))

(defcustom run-command-default-runner
  'run-command-runner-term
  "Default runner function to use when recipe does not specify any.

Either one of the runner functions shipped with run-command, or a
custom runner function.

If nil, falls back to `run-command-runner-term'.

Runners shipped with run-command:

`run-command-runner-term' (default): display command output in a `term-mode' buffer
`run-command-runner-compile': display command output in a `compilation-mode' buffer
`run-command-runner-vterm': display command output in a `vterm' buffer (requires `vterm' package to be present)
`run-command-runner-eat': display command output in a `eat' buffer (requires `eat' package to be present)"
  :type 'function
  :group 'run-command)

(defcustom run-command-default-selector
  'auto
  "Selector to use to pick a command."
  :type '(choice (const auto) function))

(defcustom run-command-completion-method
  'auto
  "Completion framework to use to select a command.

- `autodetect' (default): pick helm, ivy, or none, based on active
  global completion mode
- `helm': force use helm
- `ivy': force use ivy
- `completing-read': force use `completing-read'"
  :type '(choice (const :tag "autodetect" auto)
                 (const :tag "helm" helm)
                 (const :tag "ivy" ivy)
                 (const :tag "completing-read" completing-read)))

(defcustom run-command-recipes nil
  "List of functions that will produce command lists.

  Each function is called without arguments and must return a list of property
  lists, where each property list represents a command and has the following
  format:

  - `:command-name' (string, required): A name for the command, used
  to generate the output buffer name, as well as a fallback in case
  `:display' isn't provided
  - `:command-line' (string or function, required): The command
  line that will be executed.  Can be a function to e.g. further
  query the user, and should return a string.
  - `:display' (string, optional): A descriptive name that will
  be displayed to the user.
  - `:working-dir' (string, optional): Directory to run the command
  in.  If not given, defaults to `default-directory'."

  :type '(repeat function)
  :group 'run-command)


;;;; Entry point

;;;###autoload
(defun run-command ()
  "Pick a command from a context-dependent list, and run it.

The command list is generated by running the functions configured in
`run-command-recipes'."
  (interactive)
  (run-command--check-experiments)

  (when (not run-command-recipes)
    (error "[run-command] Please customize `run-command-recipes' in order to use `run-command'"))
  
  (funcall (run-command--get-selector) run-command-recipes))

;;;; Internals

(defun run-command--get-selector ()
  (or (pcase run-command-default-selector
        ('auto (cond ((and (boundp 'helm-mode)
                           helm-mode)
                      'run-command-selector-helm)
                     ((and (boundp 'ivy-mode)
                           ivy-mode)
                      'run-command-selector-ivy)
                     (t 'run-command-selector-completing-read)))
        ((pred functionp) run-command-default-selector)
        (_ nil))
      (pcase run-command-completion-method
        ('auto
         (cond ((and (boundp 'helm-mode) helm-mode)
                'run-command-selector-helm)
               ((and (boundp 'ivy-mode) ivy-mode)
                'run-command-selector-ivy)
               (t 'run-command-selector-completing-read)))
        ('helm 'run-command-selector-helm)
        ('ivy 'run-command-selector-ivy)
        ('completing-read 'run-command-selector-completing-read))
      'run-command-selector-completing-read))

;;;; Backward compatibility

(defcustom run-command-run-method
  'compile
  "Run strategy.

- `compile' (default): display command output in a `compilation-mode' buffer
- `term': display command output in a `term-mode' buffer"
  :type '(choice (const :tag "Terminal Mode" term)
                 (const :tag "Compilation Mode" compile)))
(make-obsolete-variable 'run-command-run-method 'run-command-default-runner "0.2.0")

;;;; Meta

(provide 'run-command)

;;; run-command.el ends here
